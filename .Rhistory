"Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
with(airquality, plot(Wind, Ozone), main = "Ozone and Wind in New York City" )
title(main="Ozone and Wind in New York City")
par()
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$wind, airquality$Ozone, set = "n")
plot(airquality$wind, airquality$Ozone, type = "n")
?plot
plot(airquality$wind, airquality$Ozone, type = "n")
len(airquality$wind)
plot(airquality$Wind, airquality$Ozone, type = "n")
title("Wind and Ozone in NYC")
head(airquality)
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month! = 5)
notmay <- subset(airquality, Month!= 5)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
points(notmay$Wind,notmay$Ozone, pch = c(17,8) col=c("blue","red", legend=c("May", "Other Months"))
points(notmay$Wind,notmay$Ozone, pch = c(17,8), col=c("blue","red", legend=c("May", "Other Months"))
)
points(notmay$Wind,notmay$Ozone, pch = c(17,8), col=c("blue","red"), legend=c("May", "Other Months"))
points("topright", pch = c(17,8), col=c("blue","red"), legend=c("May", "Other Months"))
legend("topright",pch=c(17,8),col=c("blue","red"),legend=c("May","Other Months"))
abline(v=airquality$Wind, lty = 2)
abline(v=airquality$Wind, lty = 2, lwd = 2)
abline(v=median(airquality$Wind),lty=2,lwd=2)
mfrow = c(1,2)
par(mfrow = c(1,2))
plot.new()
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
head(airquality)
xyplot( Ozone~Wind, airquality)
xyplot( Ozone~Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")\
xyplot( Ozone~Wind, airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot( Ozone~Wind | as.factor(Month), airquality, layout = c(5,1), col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
play()
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
nxt()
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
play()
xyplot(y~x|f)
plot.new()
xyplot(y~x|f)
xyplot(y~x|f, layout = c(2,1))
nxt()
v1
v2
myedit("plot1.R")
play()
?xyplot
nxt()
source(pathtofile("plot1.R", local = TRUE))
source(pathtofile("plot1.R") local = TRUE)
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
diamonds$color
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~carat | color*cut, diamonds, strip = FALSE. pch = 20, xlab = myxlab, main = mymain)
xyplot(price~carat | color*cut, diamonds, strip = FALSE, pch = 20, xlab = myxlab, main = mymain)
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
colors()
sample(colors(), 10)
colorRamp(c("red", "blue"))
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
play()
pal(0.5)
nxt()
pal(seq(0,1, len =6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(seq(0,1, len =6))
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yello"))
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
info()
main()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv )
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth") )
qplot(y = hwy, data = mpg, color = drv )
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot" )
qplot(drv, hwy, data = mpg, geom = "boxplot", color = "manufacturer" )
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer )
qplot(hwy, data = mpg, fill = drv)
qplot(displ,  hwy, data = mpg, facets = .~ drv)
qplot(hwy, data = mpg, facets =  drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv, "loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
g <- aes(data = mpg, plot(displ, hwy))
g <- ggplot(data = mpg, aes(displ, hwy))
g
summary(g)
g+geom_point()
g+geom_point()+ggeom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point("pink", size = 4, alpha = 1/2)+geom_smooth(method = "lm")+facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)+geom_smooth(method = "lm")+facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2, aes(color = drv))
g+geom_point(labs(x = "Displacement", y = "Hwy Mileage"), title = "Swirl Rules!" , aes(color = drv))
g+geom_point(color = drv, labs(title = "Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g+geom_point(aes(color = drv), labs(title = "Swirl Rules!"), labs(x = "Displacement", y = "Hwy Mileage"))
g+geom_point(size=4,alpha=1/2, aes(color = drv))
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g + geom_point(aes (color = drv), set = 2, apha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
g + geom_point(aes(color = drv) + theme_bw (base_family = "Times"))
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
plot(myx, myy, type = 'l', ylim = c(-3,3))
g<-ggplot(data  = testdat, aes (x = myx, y = myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line() + coord_cartesian (ylim(-3,3))
g+geom_line() + coord_cartesian (ylim = c(-3,3))
g <- ggplot(data = mpg, aes (x = displ, y = hwy, color = as.factor(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color ="black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color ="black")  + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!" )
source('C:/Users/Administrator/Desktop/sequentialPattermingCode/workData/summaryPlots.R')
source('C:/Users/Administrator/Desktop/sequentialPattermingCode/workData/summaryPlots.R')
source('C:/Users/Administrator/Desktop/sequentialPattermingCode/workData/summaryPlots.R')
library(TraMineR)
list.files()
library(ngram)
str <- "A B A C A B B"
ng <- ngram(str)
ng
babble(ng, genlen=5, seed=1234)
ng
babble(ng, genlen=2, seed=1234)
babble(ng, genlen=2:4, seed=1234)
babble(ng, genlen=4, seed=1234)
source('C:/Users/Administrator/Desktop/sequentialPattermingCode/Data/DataSlipBased/DMFinalAnalysis/NoAuthorshipInfo/NoAuthorshipAnalysis.R', echo=TRUE)
setwd("C:/Users/Administrator/Desktop/sequentialPattermingCode/Data/DataSlipBased/DMFinalAnalysis/NoAuthorshipInfo")
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
dataHigh
head(dataHigh)
new<-"yes"
new
nrow(ddata())
nrow(dataHigh)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
high_task1 <- data.frame(sapply(high_task1[,3:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,3:no_colHigh],  blank2na))
high_task3 <- data.frame(sapply(high_task3[,3:no_colHigh],  blank2na))
low_task1 <- data.frame(sapply(low_task1[,3:no_colLow],  blank2na))
low_task2 <- data.frame(sapply(low_task2[,3:no_colLow],  blank2na))
low_task3 <- data.frame(sapply(low_task3[,3:no_colLow],  blank2na))
dataSeq.scode <- c("Enlarge", "Normal", "Union", "Add To Group", "Remove from Group", "Move", "Shrink")
dataSeq.lab <- c("E", "N", "U", "G", "R", "M", "S")
task.lab = c("Enlarge", "Add to Group", "Move", "Normal Size", "Remove from Group", "Shrink", "Union")
high_task1.seq <- seqdef(high_task1, xtstep = 6, labels = task.lab)
high_task2.seq <- seqdef(high_task2, xtstep = 6, labels = task.lab)
high_task3.seq <- seqdef(high_task3, xtstep = 6, labels = task.lab)
low_task1.seq <- seqdef(low_task1, xtstep = 6, labels = task.lab)
low_task2.seq <- seqdef(low_task2, xtstep = 6, labels = task.lab)
low_task3.seq <- seqdef(low_task3, xtstep = 6, labels = task.lab)
# Getting all the data together
allHigh.seq <- rbind(high_task1.seq, high_task2.seq, high_task3.seq)
allLow.seq  <- rbind(low_task1.seq, low_task2.seq, low_task3.seq )
allHigh.seq
high_task1
ncol(high_task1)
colnames(high_task1)
head(dataHigh)
colnames(dataHigh)
rep("yes", 93)
sayYes<-rep("yes", 93)
sayYes<-rep("yes", 69)
dataHigh$newCol <- sayYes
dataHigh
head(dataHight)
head(dataHigh)
dataHigh[,2]
dataHigh <- dataHigh[, c(1, 94, 2:93)]
head(dataHigh)
a<-c(1,2,3)
a[1:3]
?seqmtplot
high_task2.seq
high_task2
sayYes2<-rep("yes", 20)
sayNo2<- rep("no", 20)
high_task2$yes <- sayYes2
head(high_task2)
sayYes2<-rep("yes", 69)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
sayYes<-rep("yes", 69)
sayNo <- rep("no", 69)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
head(dataHigh)
sayYes<-rep("yes", 69)
dataHigh$yes <- sayYes
head(dataHigh)
dataHigh <- dataHigh[, c(1,94,2:93)]
head(dataHigh)
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
# for the low performers
hhigh_task1
high_task1
high_task1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
# for the low performers
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
dataLow <- dataLow[, c(1,94,2:93)]
dataLow <- dataLow[, c(1,94,2:93)]
head(dataLow)
dataLow
sayNo
dataLow$no
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
head(dataLow)
dataLow <- dataLow[, c(1,94,2:93)]
head(dataLow)
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
head(dataLow)
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
sayNo <- rep("no", 69)
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
dataLow$no  <- sayNo
head(dataLow)
dataLow <- dataLow[, c(1,151,2:150)]
head(dataLow)
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
high_task1 <- data.frame(sapply(high_task1[,3:no_colHigh],  blank2na))
high_task1
head(high_task2)
np_colHigh
no_colHigh
no_colLow
head(dataHigh)
no_colHigh < no_colHigh + 1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
# for the low performers
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
dataLow <- dataLow[, c(1,151,2:150)]
head(dataLow)
head(dataLow)
no_colLow < no_colLow + 1
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
high_task1 <- data.frame(sapply(high_task1[,3:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,3:no_colHigh],  blank2na))
nno_colHigh
no_colHigh
no_colLow
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
head(dataHigh)
sayYes<-rep("yes", 69)
dataHigh$yes <- sayYes
head(dataHigh)
dataHigh <- dataHigh[, c(1,94,2:93)]
head(dataHigh)
no_colHigh <- no_colHigh + 1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
head(dataLow)
dataLow <- dataLow[, c(1,151,2:150)]
head(dataLow)
no_colLow <- no_colLow + 1
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
no_colHigh
high_task1
high_task1 <- data.frame(sapply(high_task1[,1:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,1:no_colHigh],  blank2na))
high_task3 <- data.frame(sapply(high_task3[,1:no_colHigh],  blank2na))
low_task1 <- data.frame(sapply(low_task1[,1:no_colLow],  blank2na))
low_task2 <- data.frame(sapply(low_task2[,1:no_colLow],  blank2na))
low_task3 <- data.frame(sapply(low_task3[,1:no_colLow],  blank2na))
dataSeq.scode <- c("Enlarge", "Normal", "Union", "Add To Group", "Remove from Group", "Move", "Shrink")
dataSeq.lab <- c("E", "N", "U", "G", "R", "M", "S")
task.lab = c("Enlarge", "Add to Group", "Move", "Normal Size", "Remove from Group", "Shrink", "Union")
high_task1
head(high_task1)
head(high_task2)
head(high_task3)
high_task1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
head(high_task3)
high_task1 <- data.frame(sapply(high_task1[,1:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,1:no_colHigh],  blank2na))
high_task3 <- data.frame(sapply(high_task3[,1:no_colHigh],  blank2na))
low_task1 <- data.frame(sapply(low_task1[,1:no_colLow],  blank2na))
low_task2 <- data.frame(sapply(low_task2[,1:no_colLow],  blank2na))
low_task3 <- data.frame(sapply(low_task3[,1:no_colLow],  blank2na))
dataSeq.scode <- c("Enlarge", "Normal", "Union", "Add To Group", "Remove from Group", "Move", "Shrink")
dataSeq.lab <- c("E", "N", "U", "G", "R", "M", "S")
task.lab = c("Enlarge", "Add to Group", "Move", "Normal Size", "Remove from Group", "Shrink", "Union")
high_task[,3:]
high_task[,3]
high_task1[,3]
head(high_task1)
# 1. moving (M)
# 2. enlarging to maximum size (E)
# 3. resizing to medium size (N)
# 4. shrinking (S)
# 5. Rotating (M)
# 6. making unions with other data slips (U)
# 7. add data slip to a group (G) and
# 8. remove a data slip from a group (R)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
head(dataHigh)
sayYes<-rep("yes", 69)
dataHigh$yes <- sayYes
head(dataHigh)
dataHigh <- dataHigh[, c(1,94,2:93)]
head(dataHigh)
no_colHigh <- no_colHigh + 1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
# for the low performers
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
head(dataLow)
dataLow <- dataLow[, c(1,151,2:150)]
head(dataLow)
no_colLow <- no_colLow + 1
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
high_task1 <- data.frame(sapply(high_task1[,2:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,2:no_colHigh],  blank2na))
high_task3 <- data.frame(sapply(high_task3[,2:no_colHigh],  blank2na))
dataSeq.scode <- c("Enlarge", "Normal", "Union", "Add To Group", "Remove from Group", "Move", "Shrink")
dataSeq.lab <- c("E", "N", "U", "G", "R", "M", "S")
task.lab = c("Enlarge", "Add to Group", "Move", "Normal Size", "Remove from Group", "Shrink", "Union")
high_task1.seq <- seqdef(high_task1, xtstep = 6, labels = task.lab)
high_task1
# 1. moving (M)
# 2. enlarging to maximum size (E)
# 3. resizing to medium size (N)
# 4. shrinking (S)
# 5. Rotating (M)
# 6. making unions with other data slips (U)
# 7. add data slip to a group (G) and
# 8. remove a data slip from a group (R)
library("TraMineR")
no_colHigh <- max(count.fields("tranHigh.finalDB", sep = ",")) # I have not removed the duplicate consecutifve entteries.
dataHigh <- read.table("tranHigh.finalDB",sep=",",fill=TRUE, col.names=1:no_colHigh)
head(dataHigh)
sayYes<-rep("yes", 69)
dataHigh$yes <- sayYes
head(dataHigh)
dataHigh <- dataHigh[, c(1,94,2:93)]
head(dataHigh)
no_colHigh <- no_colHigh + 1
high_task1 <- subset(dataHigh, X1 =='A')
high_task2 <- subset(dataHigh, X1 =='W')
high_task3 <- subset(dataHigh, X1 =='O')
# for the low performers
no_colLow <- max(count.fields("tranLowA.finalDB", sep = ","))
dataLow <- read.table("tranLowA.finalDB",sep=",",fill=TRUE, col.names=1:no_colLow)
sayNo <- rep("no", 69)
dataLow$no  <- sayNo
head(dataLow)
dataLow <- dataLow[, c(1,151,2:150)]
head(dataLow)
no_colLow <- no_colLow + 1
low_task1 <- subset(dataLow, X1 =='A')
low_task2 <- subset(dataLow, X1 =='W')
low_task3 <- subset(dataLow, X1 =='O')
#function to replace blanks with missing
#apply that function
blank2na <- function(x){
z <- gsub("\\s+", "", x)  #make sure it's "" and not " " etc
x[z==""] <- NA
return(x)
}
high_task1
high_task1 <- data.frame(sapply(high_task1[,4:no_colHigh],  blank2na))
head(high_task1)
high_task1 <- data.frame(sapply(high_task1[,4:no_colHigh],  blank2na))
high_task2 <- data.frame(sapply(high_task2[,4:no_colHigh],  blank2na))
high_task3 <- data.frame(sapply(high_task3[,4:no_colHigh],  blank2na))
